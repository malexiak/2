"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BunSqliteStore = void 0;
class BunSqliteStore {
    constructor(db, tableName = 'sessions') {
        Object.defineProperty(this, "db", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "tableName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.db = db;
        this.tableName = tableName;
        const query = db.query(`CREATE TABLE IF NOT EXISTS ${tableName} (id TEXT PRIMARY KEY, data TEXT)`);
        query.run();
    }
    getSessionById(sessionId) {
        const query = this.db.query(`SELECT data FROM ${this.tableName} WHERE id = $id`);
        const result = query.get({ $id: sessionId });
        if (result) {
            return JSON.parse(result.data);
        }
        else {
            return null;
        }
    }
    createSession(sessionId, initialData) {
        const query = this.db.query(`INSERT INTO ${this.tableName} (id, data) VALUES ($id, $data)`);
        query.run({ $id: sessionId, $data: JSON.stringify(initialData) });
    }
    deleteSession(sessionId) {
        const query = this.db.query(`DELETE FROM ${this.tableName} WHERE id = $id`);
        query.run({ $id: sessionId });
    }
    persistSessionData(sessionId, sessionData) {
        const query = this.db.query(`UPDATE ${this.tableName} SET data = $data WHERE id = $id`);
        query.run({ $id: sessionId, $data: JSON.stringify(sessionData) });
    }
}
exports.BunSqliteStore = BunSqliteStore;
