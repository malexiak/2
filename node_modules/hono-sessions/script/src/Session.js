"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
/**
 * Session class with methods for interacting with the session
 */
class Session {
    constructor() {
        Object.defineProperty(this, "cache", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.cache = {
            _data: {},
            _expire: null,
            _delete: false,
            _accessed: null,
        };
    }
    setCache(cache_data) {
        this.cache = cache_data;
    }
    getCache() {
        return this.cache;
    }
    setExpiration(expiration) {
        this.cache._expire = expiration;
    }
    reupSession(expiration) {
        if (expiration) {
            this.setExpiration(new Date(Date.now() + expiration * 1000).toISOString());
        }
    }
    deleteSession() {
        this.cache._delete = true;
    }
    sessionValid() {
        return this.cache._expire == null || Date.now() < new Date(this.cache._expire).getTime();
    }
    updateAccess() {
        this.cache._accessed = new Date().toISOString();
    }
    get(key) {
        const entry = this.cache._data[key];
        if (entry) {
            const value = entry.value;
            if (entry.flash) {
                delete this.cache._data[key];
            }
            return value;
        }
        else {
            return null;
        }
    }
    set(key, value) {
        this.cache._data[key] = {
            value,
            flash: false
        };
    }
    flash(key, value) {
        this.cache._data[key] = {
            value,
            flash: true
        };
    }
}
exports.Session = Session;
