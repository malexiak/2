import { getCookie, setCookie } from '../../deps.js';
import { encrypt, decrypt } from '../../mod.js';
/**
 * Cookie storage driver class
 */
class CookieStore {
    constructor(options) {
        Object.defineProperty(this, "encryptionKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "cookieOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sessionCookieName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.encryptionKey = options?.encryptionKey;
        this.cookieOptions = options?.cookieOptions;
        this.sessionCookieName = options?.sessionCookieName || 'session';
    }
    async getSession(c) {
        let session_data_raw;
        const sessionCookie = getCookie(c, this.sessionCookieName);
        if (this.encryptionKey && sessionCookie) {
            // Decrypt cookie string. If decryption fails, return null
            try {
                session_data_raw = (await decrypt(this.encryptionKey, sessionCookie));
            }
            catch {
                return null;
            }
            // Parse session object from cookie string and return result. If fails, return null
            try {
                const session_data = JSON.parse(session_data_raw);
                return session_data;
            }
            catch {
                return null;
            }
        }
        else {
            return null;
        }
    }
    async createSession(c, initial_data) {
        const stringified_data = JSON.stringify(initial_data);
        setCookie(c, this.sessionCookieName, this.encryptionKey ? await encrypt(this.encryptionKey, stringified_data) : stringified_data, this.cookieOptions);
    }
    async deleteSession(c) {
        setCookie(c, this.sessionCookieName, this.encryptionKey ? await encrypt(this.encryptionKey, '') : '', this.cookieOptions);
    }
    async persistSessionData(c, session_data) {
        const stringified_data = JSON.stringify(session_data);
        setCookie(c, this.sessionCookieName, this.encryptionKey ? await encrypt(this.encryptionKey, stringified_data) : stringified_data, this.cookieOptions);
    }
}
export default CookieStore;
